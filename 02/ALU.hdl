// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   //zx
   And16(a=x, b=false, out=a1);  //the zero of x
   Mux16(a=x, b=a1, sel=zx, out=zx1); //return either x or 0x

   //nx
   Not16(in=zx1, out=a2); //not zx1
   Mux16(a=zx1, b=a2, sel=nx, out=nx1); //final x
   
   //zy
   And16(a=y, b=false, out=a3);  //the zero of y
   Mux16(a=y, b=a3, sel=zy, out=zy1);  // return either y or 0y

   //ny
   Not16(in=zy1, out=a4);  //not zy1
   Mux16(a=zy1, b=a4, sel=ny, out=ny1); // final y

   //f
   And16(a=nx1, b=ny1, out=mf1);  //x and y
   Add16(a=nx1, b=ny1, out=mf2);  //x + y
   Mux16(a=mf1, b=mf2, sel=f, out=f1);

   //no
   Not16(in=f1, out=no1); // !f
   Mux16(a=f1, b=no1, sel=no, out=out);
   Mux16(a=f1, b=no1, sel=no, out=holder, out[0..7]=a5, out[8..15]=a6, out[15]=ng);

   //zr
   Or8Way(in=a5, out=or1);
   Or8Way(in=a6, out=or2);
   Or(a=or1, b=or2, out=or3);
   Not(in=or3, out=zr);
   

}