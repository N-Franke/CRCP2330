// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT 
        outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:
     Not(in=instruction[15], out=loadA); //if loadA=0 do not set A-register because it is a C-instruction,
                                        // if loadA=1 set A-register to new value

     Mux16(a=ALUoutput, b=instruction, sel=loadA, out=out1);
     //If LOAD=0, it chooses the ALUoutput to be saved in the A-register
     //If LOAD=1, it chooses the instruction to work with

     Or(a=loadA, b=instruction[5], out=loadB);
     //LoadB can only be 1 if A-instruction or Dest [5] == 1 (C-instruction)
     ARegister(in=out1, load=loadB, out=outA, out[0..14]=addressM); 
    //sets A-register dependent on presence of c-instruction and destination
    //when A Register has been set, you can also set the Address of M=RAM[A]

     And(a=instruction[15], b=instruction[12], out=selectAM);
     //if A, selectAM=0, if M, selectAM=1
     Mux16(a=outA, b=inM, sel=selectAM, out=AorM);
     //picks between A value and M value, 

     And(a=instruction[15], b=instruction[4], out=loadC);
     //[15]==1, [4]==1 to set for D 
     DRegister(in=ALUoutput, load=loadC, out=outD);
     //sets DRegister based on ALU output value

     //write to M
     And(a=instruction[15], b=instruction[3], out=writeM);
     //checks it's a C instruction, sets M 

     ALU(x=outD, y=AorM,
      zx=instruction[11], nx=instruction[10],
      zy=instruction[9], ny=instruction[8], 
      f=instruction[7], no=instruction[6],
      out=ALUoutput, out=outM, 
      zr=zrOut, ng=ngOut);
     //calculates between values of Dreg and Areg, outputs outM, zero, negative

     //PROGRAM COUNTER 
     //JEQ
     And(a=instruction[15], b=instruction[1], out=JEQ);
     //if c-instruction and [1]==1,

     //JLT
     And(a=instruction[15], b=instruction[2], out=JLT);
     //if c-instruction, instruction[2]=1, JLT=1 (output is less than zero)

     //JGT
     And(a=instruction[15], b=instruction[0], out=JGT);
     //if c-instruction=1, instruction[0]=1, JGT=1

     And(a=zrOut, b=ngOut, out=positive); //value is positive, greater than zero
     And(a=JGT, b=positive, out=switch1);  //greater than zero and positive
     And(a=JLT, b=ngOut, out=switch2); //less than zero and negative

     Or(a=JEQ, b=switch1, out=jump1); //equal to JGE
     Or(a=jump1, b=switch2, out=PCload); //equal to JLE

     PC(in=outA, load=PCload, inc=true, reset=reset, out[0..14]=pc);
    
}