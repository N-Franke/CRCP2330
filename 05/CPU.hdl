// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT 
        outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //decode instruction
    //HELP?!?!?!
    SOMETHING (in=instruction, out=LOAD);

    //instruction
    Mux16(a=instruction[15], b=ALU OUTPUT, sel=LOAD, out=out1); 

    //Output goes to A register, uses a load 
    Aregister(in= out1, load=LOAD, out=out2); 

    //inM
    //picks between A register or M register
    //0=Aregister, 1=Mregister
    Mux16(a=out1, b=inM, sel=LOAD, out=out3);
    //out3 is either A or M

    //ALU--AHHH HELP FILL
    ALU (x=out3 ,y=out4 ,zx= ,nx= ,zy= ,ny= ,f= ,no= ,out= ,zr= ,ng= ); 
    //outputs 3: ALU output, outM, and a load

    //D register
    input: ALU output
    uses a load
    output: out4


    //writeM
    //load that writes to the program

    //reset
    //uses reset
    //no increase
    //uses a load
    PC (in=out2 ,load= ,inc= ,reset= ,out=pc[15]); 
}